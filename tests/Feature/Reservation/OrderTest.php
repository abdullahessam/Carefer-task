<?php

namespace Tests\Feature\Reservation;

use App\Models\User;
use Tests\TestCase;

class OrderTest extends TestCase
{
    // todo: add more testcases to cover all cases specially for bus locking
    /*
     * @var User
     * @description: this variable is used to store user data
     */
    public $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
    }

    public function create_user()
    {
        $data = [
            'name' => 'Test User',
            'email' => 'test@test.com',
            'password' => 'password',
        ];

        return $this->post('/api/v1/register', $data);
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_logged_user_can_show_orders()
    {

        $response = $this->actingAs($this->user)->get('/api/v1/orders');

        $response->assertStatus(200);
        //        TODO : create test for response data to verify it's correct
        /*   $response->assertExactJson([
               'data' => [],
               'message' => 'success',
               'status' => 200
           ]);*/
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_guest_user_cannot_show_orders()
    {

        $response = $this->get('/api/v1/orders');

        $response->assertStatus(403);

    }

    public function test_create_new_order()
    {
        //        $line=Line::factory()->create();
        $response = $this->actingAs($this->user)->post('/api/v1/orders', [
            'line_id' => 1,
            'seats' => [1, 2, 3, 4],
        ]);
        $response->assertStatus(200);
    }

    public function test_create_new_order_with_invalid_data()
    {
        $response = $this->actingAs($this->user)->post('/api/v1/orders', [
            'line_id' => 1,
        ]);
        $response->assertStatus(422);
    }

    public function test_read_order()
    {
        $order = $this->user->orders()->create([
            'line_id' => 1,
            'seats' => [1, 2, 3, 4],
        ]);
        $response = $this->actingAs($this->user)->get("/api/v1/orders/{$order->id}");
        $response->assertStatus(200);
    }

    public function test_update_order()
    {
        $order = $this->user->orders()->create([
            'line_id' => 1,
            'seats' => [1, 2, 3, 4],
        ]);
        $response = $this->actingAs($this->user)->put("/api/v1/orders/{$order->id}", [
            'line_id' => 1,
            'seats' => [1, 2, 3, 4],
        ]);
        $response->assertStatus(200);
    }

    public function test_delete_order()
    {
        $order = $this->user->orders()->create([
            'line_id' => 1,
            'seats' => [1, 2, 3, 4],
        ]);
        $response = $this->actingAs($this->user)->delete("/api/v1/orders/{$order->id}");
        $response->assertStatus(200);

    }
}
