<?php

namespace Tests\Feature\Booking;

use App\Domains\Trip\V1\Interfaces\ISeat;
use App\Domains\Trip\V1\Repositories\SeatRepository;
use App\Http\Resources\Api\V1\Booking\OrderResource;
use App\Http\Resources\Api\V1\Trip\LineResource;
use App\Models\Bus;
use App\Models\Line;
use App\Models\Station;
use App\Models\User;
use Faker\Factory;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Redis;
use Tests\TestCase;

class OrderTest extends TestCase
{
    use  WithFaker,RefreshDatabase;

    /*
     * @var User
     * @description: this variable is used to store user data
     */
    public $user;

    public Station $start_station;
    public Station $end_station;
    public Bus $bus;
    public Line $line;
    public ISeat $seatRepo;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Redis::flushall();

        $this->user = User::factory()->create();
        $this->start_station = Station::factory()->create();
        $this->end_station = Station::factory()->create();
        $this->bus = Bus::factory()->create();
        $this->createNewLine();

        $this->seatRepo = $this->app->make(ISeat::class);
    }

    public function createNewLine()
    {
        $this->line = Line::factory()->create([
            'start_station_id' => $this->start_station->id,
            'end_station_id' => $this->end_station->id,
            'bus_id' => $this->bus->id,
        ]);
    }

    public function calculateTotal($number_of_seats, $price)
    {
        if ($number_of_seats >= 5) {
            return $number_of_seats * $price * 0.9;
        }
        return (float)$number_of_seats * $price;
    }

    /**
     * testing if user can book seats
     * @test
     * @return void
     * @throws \Throwable
     */
    public function test_create_order_with_valid_data_without_discount()
    {
        $numbers_of_seats = rand(1, 4);
        $response = $this->actingAs($this->user)->post('/api/V1/booking/orders', [
            'line_id' => $this->line->id,
            'seat_numbers' => Arr::random($this->seatRepo->availableSeats($this->line), $numbers_of_seats),
        ], [
            'Accept' => 'application/json'
        ]);

        $resource = new OrderResource($this->user->orders()->latest()->first());
        // validate status code
        $response->assertStatus(200);
        // validate the order data is registered in database
        $this->assertSame(json_decode($resource->response()->getContent(), true)['data'], $response->decodeResponseJson()['data']);
        //validate order total calculations
        $response_data = $response->decodeResponseJson()['data'];
        $this->assertSame($this->calculateTotal($numbers_of_seats, $this->line->price), (float)$response_data['sub_total'] - $response_data['discount']);

    }

    /**
     * if use booked more than 5 seats, he will get 10% discount
     * @return void
     * @throws \Throwable
     */
    public function test_create_order_with_valid_data_with_booking_more_than_5_seats()
    {
        $this->createNewLine();

        $numbers_of_seats = rand(5, 10);
        $response = $this->actingAs($this->user)->post('/api/V1/booking/orders', [
            'line_id' => $this->line->id,
            'seat_numbers' => Arr::random($this->seatRepo->availableSeats($this->line), $numbers_of_seats),
        ], [
            'Accept' => 'application/json'
        ]);

        $resource = new OrderResource($this->user->orders()->latest()->first());
        // validate status code
        $response->assertStatus(200);
        // validate the order data is registered in database
        $this->assertSame(json_decode($resource->response()->getContent(), true)['data'], $response->decodeResponseJson()['data']);
        //validate order total calculations
        $response_data = $response->decodeResponseJson()['data'];
        $this->assertSame(round($this->calculateTotal($numbers_of_seats, $this->line->price), 2), round((float)$response_data['sub_total'] - $response_data['discount'],2));
    }



}
